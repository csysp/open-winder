#!/usr/sbin/nft -f

flush ruleset

table inet filter {
  sets {
    lan_ifaces { type ifname; flags interval; elements = { "${ROUTER_LAN_IF}.${VLAN_TRUSTED}", "${ROUTER_LAN_IF}.${VLAN_IOT}", "${ROUTER_LAN_IF}.${VLAN_GUEST}", "${ROUTER_LAN_IF}.${VLAN_LAB}" } }
    wan_ifaces { type ifname; elements = { "${ROUTER_WAN_IF}" } }
  }

  chains {
    wg_spa_allow {
      # dynamic allow rules inserted/removed by SPA daemon
    }
    input {
      type filter hook input priority 0;
      policy drop;
      iif lo accept
      ct state established,related accept

      # Allow SSH from TRUSTED and WG
      tcp dport 22 ip saddr ${NET_TRUSTED} accept
      tcp dport 22 ip saddr ${WG_NET} accept

      # Allow DHCP on VLAN interfaces
      iifname @lan_ifaces udp dport {67,68} accept

      # Allow DNS on VLAN and WG
      iifname @lan_ifaces tcp dport 53 accept
      iifname @lan_ifaces udp dport 53 accept
      iifname "wg0" tcp dport 53 accept
      iifname "wg0" udp dport 53 accept

      # WireGuard UDP (SPA-gated via dynamic chain)
      udp dport ${WG_PORT} jump wg_spa_allow

      # QUIC wrapper UDP
      udp dport ${WRAP_LISTEN_PORT} accept

      # ICMP rate-limit
      icmp type echo-request limit rate 5/second accept
    }

    forward {
      type filter hook forward priority 0;
      policy drop;
      ct state established,related accept

      # Allow LAN and WG out to WAN
      iifname @lan_ifaces oifname @wan_ifaces accept
      iifname "wg0" oifname @wan_ifaces accept
    }

    output {
      type filter hook output priority 0;
      policy accept;
    }
  }
}

table inet nat {
  chains {
    prerouting { type nat hook prerouting priority -100; }
    postrouting {
      type nat hook postrouting priority 100;
      # Masquerade VLANs and WG to WAN
      oifname "${ROUTER_WAN_IF}" ip saddr { ${NET_TRUSTED}, ${NET_IOT}, ${NET_GUEST}, ${NET_LAB}, ${WG_NET} } masquerade
      # Double-hop: masquerade WG_NET out of wg1 if present
      oifname "wg1" ip saddr ${WG_NET} masquerade
    }
  }
}
