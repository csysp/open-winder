#!/usr/sbin/nft -f

flush ruleset

table inet filter {
  sets {
    wg_spa { type ipv4_addr; flags timeout; }
  }
  chains {
    input {
      type filter hook input priority 0;
      policy drop;
      iif lo accept
      ct state established,related accept

      # SSH from LAN and WG
      iifname "${ROUTER_LAN_IF}" tcp dport 22 ip saddr ${NET_TRUSTED} accept
      tcp dport 22 ip saddr ${WG_NET} accept

      # DHCP/DNS on LAN and WG
      iifname "${ROUTER_LAN_IF}" udp dport {67,68} accept
      iifname "${ROUTER_LAN_IF}" tcp dport 53 accept
      iifname "${ROUTER_LAN_IF}" udp dport 53 accept
      iifname "wg0" tcp dport 53 accept
      iifname "wg0" udp dport 53 accept

      # WireGuard UDP (SPA-gated)
      udp dport ${WG_PORT} ip saddr @wg_spa accept
      # QUIC wrapper UDP (if enabled)
      udp dport ${WRAP_LISTEN_PORT} accept

      # ICMP limited
      icmp type echo-request limit rate 5/second accept
    }

    forward {
      type filter hook forward priority 0;
      policy drop;
      ct state established,related accept

      # Allow LAN and WG to WAN
      iifname "${ROUTER_LAN_IF}" oifname "${ROUTER_WAN_IF}" accept
      iifname "wg0" oifname "${ROUTER_WAN_IF}" accept
    }

    output { type filter hook output priority 0; policy accept; }
  }
}

table inet nat {
  chains {
    prerouting { type nat hook prerouting priority -100; }
    postrouting {
      type nat hook postrouting priority 100;
      oifname "${ROUTER_WAN_IF}" ip saddr { ${NET_TRUSTED}, ${WG_NET} } masquerade
      # Double-hop: masquerade WG_NET out of wg1 if present
      oifname "wg1" ip saddr ${WG_NET} masquerade
    }
  }
}

